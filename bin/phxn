#!/usr/bin/env bash

# This is everything I do immediately after creating a new Phoenix project.
#
# Currently there are no options since I always do all these things:
#
#  - Assumes I want to use UUIDs and creates a Schema module for use in Schemas
#  - Removes page controller and associated files
#  - Removes other template boiler plate
#  - Creates a HomeLive LiveView
#  - Removes the Phoenix Logo

function snake_to_pascal {
  echo $1 | perl -pe 's/(?:\b|_)(\p{Ll})/\u$1/g'
}

mix phx.new "$@" --binary-id

cd "$1"

# Delete page controller
rm "lib/$1_web/controllers/page_controller.ex"
rm "test/$1_web/controllers/page_controller_test.exs"

# Delete templates
rm "lib/$1_web/templates/page/index.html.heex"
rmdir "lib/$1_web/templates/page"

# Delete view
rm "lib/$1_web/views/page_view.ex"

# Remove header from the root layout
sed -I '' '13,27d' "lib/$1_web/templates/layout/root.html.heex"

# Remove getext thing (if it's there)
sed -I '' '10s/.*/      compilers: Mix.compilers(),/' mix.exs

# Remove CSS
rm assets/css/phoenix.css
echo > assets/css/app.css

# Use utc_datetime_usec in migrations
subt="s/pool_size: 10/pool_size: 10,\n  migration_timestamps: \[type: :utc_datetime_usec\]/"
sed -I '' "$subt" "config/dev.exs"
sed -I '' "$subt" "config/test.exs"

# Setup a HomeLive
sed -I '' 's/get "\/", PageController, :index/live "\/", HomeLive, :index/' "lib/$1_web/router.ex"

mkdir "lib/$1_web/live"

module=$(snake_to_pascal "$1")

cat <<EOF > "lib/$1/schema.ex" 
defmodule ${module}.Schema do
  defmacro __using__(_) do
    quote do
      use Ecto.Schema

      import Ecto.Changeset, warn: false

      @timestamps_opts type: :utc_datetime_usec

      @primary_key {:id, :binary_id, autogenerate: true}
      @foreign_key_type :binary_id
    end
  end
end
EOF

cat <<EOF > "lib/$1_web/live/home_live.ex" 
defmodule ${module}Web.HomeLive do
  use ${module}Web, :live_view

  def render(assigns) do
    ~H"""
    <h1>${module}</h1>
    """
  end
end
EOF

# Delete phoenix logo
rm priv/static/images/phoenix.png

# Use the heex formatting plugin
cat <<EOF > ".formatter.exs"
[
  import_deps: [:ecto, :phoenix],
  plugins: [Phoenix.LiveView.HTMLFormatter],
  inputs: ["*.{heex,ex,exs}", "priv/*/seeds.exs", "{config,lib,test}/**/*.{heex,ex,exs}"],
  subdirectories: ["priv/*/migrations"]
]
EOF

cat <<EOF > "test/support/factory.ex"
defmodule ${module}.Factory do
  ## API
  #
  def build(factory_name, attrs) do
    factory_name |> build() |> struct(attrs)
  end

  def insert(factory_or_factory_name, attrs \\ [])

  def insert(factory_name, attrs) when is_atom(factory_name) do
    build(factory_name, attrs) |> ${module}.Repo.insert!()
  end

  def insert(factory, attrs) do
    factory |> struct(attrs) |> ${module}.Repo.insert!()
  end

  defp unique, do: System.unique_integer()
  defp unique(string) when is_binary(string), do: "#{string}#{unique()}"
end
EOF
