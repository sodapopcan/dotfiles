###
# Elixir

## General

snippet defm
	defmodule $1 do
		@moduledoc """
		$0
		"""
	end

###
# LiveView

## General

snippet @
	@impl true
	$0

snippet cu=
	current_user = socket.assigns.current_user

snippet =sa
	$1 = socket.assigns.$1
	$0

snippet sa=
	socket =
		socket
		|> assign(:$1, $1)

snippet |>a
	|> assign(:$1, $1)

snippet |>aa
	|> assign(:$1, assigns.$1)
## Mount

snippet m
	def mount(${1:_params}, ${2:_session}, socket) do
		$3 = $4

		socket =
			socket
			|> assign(:$3, $3)

		{:ok, socket}
	end

snippet mp
	def mount(%{"$1" => $1}, ${2:_session}, socket) do
		$3 = $4

		socket =
			socket
			|> assign(:$3, $3)

		{:ok, socket}
	end

snippet i
	def handle_info($1, socket) do
		$0

		{:noreply, socket}
	end

## Render

snippet r
	def render(assigns) do
		~H"""
		$0
		"""
	end

## Update

snippet u
	def update(assigns, socket) do
	  socket =
			socket
			|> assign(:$1, assigns.$1)

		{:ok, socket}
	end

snippet e
	def handle_event("$1", ${2:_params}, socket) do
		$0

		{:noreply, socket}
	end

###
# Tests

snippet f
	feature "$1", %{session: session} do
		$0
	end

snippet d
	describe "$1" do
		test "$2" do
			$0
		end
	end

snippet d
	describe "$1" do
		test "$2" do
			$0
		end
	end

snippet dc
	describe "$1" do
		test "$2", %{conn: conn} do
			$0
		end
	end

snippet t
	test "$1" do
		$0
	end

snippet tc
	test "$1", %{conn: conn} do
		$0
	end
